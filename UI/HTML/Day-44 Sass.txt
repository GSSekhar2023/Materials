Variables in Sass

- Variables are storage locations in memory, where you can store a value and use it as a part of any expression.
- Sass variables are defined by using "$" and reference name.

                    $variableName

- You can store any type of CSS value in a variable.

                    $variableName : value;

- Variable Naming Conventions
    * Variable name must start with alphabet
    * Don't use special chars in name
    * It can be alpha numberic.
    * Blankspace not allowed
    * Use camel case for naming.            
                            backgroundColor
                            textAlign
                            fontStyle

- Variable have 2 scopes

    a) Global
    b) Block

- Global allows to access from any block.
- Block scope allows only within the specified block.

        effects.scss
          // global scope
          {
             //block scope
          }

- Variable is accessed by using the "$" reference

        {
          cssProperty : $variableName;
        }

Ex:
effects.scss

$border: 2px solid red;
$shadow: 2px 2px 3px blue;
$padding: 20px;

.container {
  border:$border;
  box-shadow: $shadow;
  padding: $padding;
  background-color: yellow;
  h2 {
    color:red;
    border: $border;
    text-shadow: $shadow;
    padding: $padding;
  }
  p {
    color:blue;
    font-style: italic;
  }
}

> sass  effects.scss effects.css

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../scss/effects.css">
</head>
<body>
    <div class="container">
        <h2>Sass</h2>
        <p>Syntactically Awesome Stylesheet</p>
    </div>
</body>
</html>

                                     Statements
- Statements are used to control execution flow in any computer programming.

The IF statement:
 - It is used to in decision making.
 - It checks the condition and executes set of statements based on the value returned by condition.
 - It condition is true then one set of statements else another set of statements.
 - Sass statements are defined by using "@"

Syntax:  Forward Jump

        @if   condition
         {
           effects on true;
         }
       
Syntax: Simple Decision

        @if  condition
        {
          effects on true;
        }
        @else
        {
         effects on false;
        }

Syntax: Multiple Decisions

        @if  condition1
        {
          effects on condition1 true;
        }
        @else if condition2
        {
          effects on condition2 true;
        }
        @else
        {
         effects when all conditions false;
        }

Syntax: Multi Level Conditions

        @if  condition1
          {
            @if condition2
             {
               effects on both conditions true;
             }
            @else
            {
              effects on condition2 false;
            }
        }
        @else
        {
          effects on condition1 false;
        }

Ex:
effects.scss

$themeColor: blue;

@if $themeColor==green
{
   .container {
      border:2px solid green;
      background-color: rgb(197, 254, 197);
      padding: 20px;
      box-shadow: 2px 2px 2px rgb(160, 234, 160);
      h2 {
         color:rgb(1, 96, 1);
      }
   }
} @else if $themeColor==red {
  .container {
    border:2px solid red;
    background-color: rgb(254, 197, 197);
    padding: 20px;
    box-shadow: 2px 2px 2px rgb(234, 160, 160);
    h2 {
       color:rgb(96, 1, 1);
    }
 }
} @else {
  .container {
    border:2px solid rgb(0, 0, 0);
    background-color: rgb(239, 236, 236);
    padding: 20px;
    box-shadow: 2px 2px 2px rgb(220, 218, 218);
    h2 {
       color:rgb(113, 112, 112);
    }
 }
}


index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../scss/effects.css">
</head>
<body>
    <div class="container">
        <h2>Sass</h2>
        <p>Syntactically Awesome Stylesheet</p>
    </div>
</body>
</html>                            

The "For" Iterator
- It is used to execute a set of statement repeatedly until the given condition is satisfied.
- It uses initializer and upperbound value.

Syntax:
        @for  initilizer  from  lowerbound  through  upperbound
          {
          }

        @for  $ref  from  1  through 10
          {

          }

Ex:
position.scss

img, div {
    width: 100px;
    height: 100px;
}
@for $i from 1 through 4
{
    .box-#{$i} {
        margin-left:$i * 100px;
    }
}

position.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../scss/position.css">
</head>
<body>
    <div class="box-1">
        <img src="../public/images/a1.jpg">
    </div>
    <div class="box-2">
        <img src="../public/images/a2.jpg">
    </div>
    <div class="box-3">
        <img src="../public/images/a3.jpg">
    </div>
    <div class="box-4">
        <img src="../public/images/a4.jpg">
    </div>
</body>
</html>

                                        Mixins
- It is used to "Refactor" the code.
- Refactor is the process of extracting a code snippet and encapsulate into a method, so that you can reuse the code without re-writing.
- Mixin refers to a "Method()" in computer programming.
- Mixin is defined by using

        @mixin  name(parameters:optional)
         {
            your code block
         }


- You can access and use the mixin from any location using

        @include   mixinName


Ex:
effects.scss

$themeColor: green;

@mixin SetTheme($borderColor, $bgColor, $shadowColor, $hColor)
{
   .container {
      border:2px solid $borderColor;
      background-color: $bgColor;
      padding: 20px;
      box-shadow: 2px 2px 2px $shadowColor;
      h2 {
         color:$hColor;
      }
   }
}

@if $themeColor==green
{
   @include SetTheme(green, rgb(211, 254, 211) , rgb(26, 87, 26) , rgb(4, 66, 4) )
   

}
@else if $themeColor==red
{
   @include SetTheme(red,rgb(253, 181, 181) , rgb(152, 4, 4) , rgb(124, 7, 7) ) ;
}
@else
{
   @include SetTheme(black, rgb(235, 231, 231) ,  rgb(92, 90, 90), rgb(69, 67, 67) )  
}


index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../scss/effects.css">
</head>
<body>
    <div class="container">
        <h2>Sass</h2>
        <p>Syntactically Awesome Stylesheet</p>
    </div>
</body>
</html>